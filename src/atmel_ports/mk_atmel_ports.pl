#!/usr/bin/perl -CS

# mk_atmel_all.pl
#
# create a header files for PIN/PORT/DDR definitions 
# (better than cut/paste! any errors will be systematic :)
#
# by Stefan Rueger, 2016

use strict;
use warnings;


my @ports = map { chr(ord('A')+$_)} (0 .. 11);
my ($undefineletters, $portvalues);
$undefineletters .= "#undef $_\n" for @ports;
$portvalues .= "#define UR_PORT_VALUE_$ports[$_] ($_<<3)\n" for (0 .. 11);

my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();
my $date = sprintf("%02d.%02d.%04d", $mday, $mon+1, 1900+$year);
print <<"__END";
/*
 * atmel_ports.h
 *
 * DO NOT EDIT - was generated by mk_atmel_ports.pl
 * Header file to manipulate Atmel ports.
 *
 * Published under GNU General Public License, version 3 (GPL-3.0)
 * meta-author Stefan Rueger
 *
 * First version 12.06.2016
 * Generated $date
 *
 * Usage
 *
 * #define activityLedPin AtmelPB5
 * // or #define activityLedPin ArduinoPin13
 *
 * // make LED pin output
 * UR_DDR(activityLedPin)  |= UR_BV(activityLedPin);
 * // switch LED on
 * UR_PORT(activityLedPin) |= UR_BV(activityLedPin);
 * // switch LED off
 * UR_PORT(activityLedPin) &= ~UR_BV(activityLedPin);
 * // toggle LED
 * UR_PIN(activityLedPin)  = UR_BV(activityLedPin);
 *
 * // check whether pins are the same
 * #if UR_PIN_VALUE(AtmelSCK) == UR_PIN_VALUE(activityLedPin)
 * #warning cannot use LED independently from SPI - please resolder LED
 * #endif
 *
 * Published under GNU General Public License, version 3 (GPL-3.0)
 * meta-author Stefan Rueger
 *
 * v 1.0
 * 12.06.2016
 */

#ifndef ATMEL_PORTS_H
#define ATMEL_PORTS_H

$undefineletters
$portvalues
#undef PORT
#undef PIN
#undef DDR

#define ur_arg_chr(name, chr, bit) name##chr   // sth like PORTA, PINC, UR_PORT_VALUE_B
#define ur_arg_bit(name, chr, bit)       bit   // bit number
#define ur_arg(name, what, a, b) (ur_arg_##what(name, a, b))

#define UR_PORT(pin) (ur_arg(PORT, chr, pin))   // PORTA, PORTB, ...
#define UR_DDR(pin)  (ur_arg(DDR,  chr, pin))   // DDRA, DDRB, ...
#define UR_PIN(pin)  (ur_arg(PIN,  chr, pin))   // PINA, PINB, ...
#define UR_BIT(pin)  (ur_arg(*, bit, pin))      // 0, 1, ..., 7
#define UR_BV(pin)   (1<<(ur_arg(*, bit, pin))) // 1, 2, ..., 128

// numeric value of an Atmel pin and a port - useful for #if comparisons
#define UR_PIN_VALUE(pin) ((ur_arg(UR_PORT_VALUE_, chr, pin))+(ur_arg(*, bit, pin)))
#define UR_PORT_VALUE(pin) (ur_arg(UR_PORT_VALUE_, chr, pin))

__END

foreach my $port ( @ports ) {
  foreach my $bit (0 .. 7) {
    print "#define AtmelP$port$bit $port,$bit\n";
  }
  print "\n";
}

my @uPs = (
   ['standard', [qw(ATmega328 ATmega328P ATmega168A ATmega168PA ATmega168 ATmega168P ATmega88A ATmega88PA ATmega88 ATmega88P ATmega48A ATmega48PA ATmega48 ATmega48P ATmega8)]],
   ['MoteinoMEGA', [qw(ATmega1284 ATmega1284P  ATmega644A ATmega644PA  ATmega644 ATmega644P ATmega324A ATmega324PA  ATmega164A ATmega164PA ATmega16 ATmega32)]],
   ['mega', [qw(ATmega2560 ATmega2561  ATmega1280 ATmega1281  ATmega640)]],
   ['attiny84', [qw(ATtiny24 ATtiny44 ATtiny84)]],
   ['digispark', [qw(ATtiny25 ATtiny45 ATtiny85)]],
   ['digisparkpro', [qw(ATtiny87 ATtiny167)]],
);

my $washere;
foreach my $uP (@uPs) {
  my ($ifline, $file, $ardu, $seen, $inp);

  $ifline .= "defined(__AVR_${_}__) || " for @{$uP->[1]};
  print "\n".($washere? '#elif ' : '#if ').substr($ifline, 0, -4)."\n";
  open($inp, $file="variants/$uP->[0]/pins_atmel_map.h") or die "cannot open $file (stopped)";
  while(<$inp>) {
    $ardu = /define.Arduino/ || /define.Atmel/;
    print "\n" if(!$seen && $ardu);
    print if $ardu;
    $seen = $ardu;
  }
  close($inp);
  $washere = 1;
}
print <<END

#else
// Will not know mapping of ArduinoPinX to AtmelPXX: don't allow their use
#pragma GCC poison ArduinoPinA0 ArduinoPinA1 ArduinoPinA2 ArduinoPinA3 ArduinoPinA4 ArduinoPinA5 ArduinoPinA6
#pragma GCC poison ArduinoPinA7 ArduinoPinA8 ArduinoPinA9 ArduinoPinA10 ArduinoPinA11 ArduinoPinA12 ArduinoPinA13
#pragma GCC poison ArduinoPinA14 ArduinoPinA15 ArduinoPin0 ArduinoPin1 ArduinoPin2 ArduinoPin3 ArduinoPin4 ArduinoPin5
#pragma GCC poison ArduinoPin6 ArduinoPin7 ArduinoPin8 ArduinoPin9 ArduinoPin10 ArduinoPin11 ArduinoPin12 ArduinoPin13
#pragma GCC poison ArduinoPin14 ArduinoPin15 ArduinoPin16 ArduinoPin17 ArduinoPin18 ArduinoPin19 ArduinoPin20
#pragma GCC poison ArduinoPin21 ArduinoPin22 ArduinoPin23 ArduinoPin24 ArduinoPin25 ArduinoPin26 ArduinoPin27
#pragma GCC poison ArduinoPin28 ArduinoPin29 ArduinoPin30 ArduinoPin31 ArduinoPin32 ArduinoPin33 ArduinoPin34
#pragma GCC poison ArduinoPin35 ArduinoPin36 ArduinoPin37 ArduinoPin38 ArduinoPin39 ArduinoPin40 ArduinoPin41
#pragma GCC poison ArduinoPin42 ArduinoPin43 ArduinoPin44 ArduinoPin45 ArduinoPin46 ArduinoPin47 ArduinoPin48
#pragma GCC poison ArduinoPin49 ArduinoPin50 ArduinoPin51 ArduinoPin52 ArduinoPin53 ArduinoPin54 ArduinoPin55
#pragma GCC poison ArduinoPin56 ArduinoPin57 ArduinoPin58 ArduinoPin59 ArduinoPin60 ArduinoPin61 ArduinoPin62
#pragma GCC poison ArduinoPin63 ArduinoPin64 ArduinoPin65 ArduinoPin66 ArduinoPin67 ArduinoPin68 ArduinoPin69
#endif

#endif
END
